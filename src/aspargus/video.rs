use chksum_hash_md5 as md5;
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};

use super::aspargus_helper;
/// Represents a video resume, generated by an LLM.
/// ### Fields
/// - `title`: The title of the video.
/// - `description`: The description of the video.
/// - `keywords`: An array of keywords representing the video.
#[derive(Default, Deserialize, Serialize, Debug)]
pub struct Resume {
    pub title: String,
    pub description: String,
    pub keywords: Vec<String>,
}

/// Represents a video.
/// ### Fields
/// - `id`: An idea for this video, internal purpose.
/// - `path`: The path of the video file.
/// - `story`: The story of this video generated by the CV model when a 2 steps approach is prefered.
/// - `resume`: The resume of the video generated by the CV and optionally the text models.
/// - `thumbnails`: The thumbnails of the video.
/// - `creation_date`: The creation date of the video.
/// - `gap`: The gap between thumbnails to be extracted, based on the video's duration.
/// - `numeric_id`: The number of the video in the queue.
///
#[derive(Default, Serialize)]

pub struct Video {
    #[serde(skip_serializing)]
    pub id: String,
    pub path: String,
    #[serde(skip_serializing)]
    pub story: String,
    pub resume: Resume,
    #[serde(skip_serializing)]
    pub thumbnails: Vec<String>,
    #[serde(skip_serializing)]
    pub creation_date: DateTime<Utc>,
    #[serde(skip_serializing)]
    pub gap: i32,
    #[serde(skip_serializing)]
    pub numeric_id: i32,
    #[serde(skip_serializing)]
    pub skip: bool,
}

impl Video {
    /// Creates a new Video.
    ///
    /// ### Parameters
    /// - `path`: The path of the video file.
    /// - `numeric_id`: The number of the video in the queue.
    ///
    /// ### Returns
    /// A new Video.
    pub fn new(path: String, numeric_id: i32) -> anyhow::Result<Self> {
        let id = md5::hash(&path).to_hex_lowercase();
        let (duration, creation_date) = aspargus_helper::get_video_metadata(path.as_str())?;
        let gap = aspargus_helper::get_capture_gap(duration.unwrap_or_default());
        Ok(Self {
            id,
            path,
            story: String::default(),
            resume: Resume::default(),
            thumbnails: Vec::new(),
            creation_date: creation_date.unwrap_or_default(),
            gap,
            numeric_id,
            skip: false,
        })
    }
}
